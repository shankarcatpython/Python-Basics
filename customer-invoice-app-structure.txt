Folder Structure:
customer-invoice-app/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           ├── controller/
│   │   │           │   └── CustomerController.java
│   │   │           ├── entity/
│   │   │           │   ├── Customer.java
│   │   │           │   └── Invoice.java
│   │   │           ├── repository/
│   │   │           │   ├── CustomerRepository.java
│   │   │           │   └── InvoiceRepository.java
│   │   │           ├── service/
│   │   │           │   └── CustomerService.java
│   │   │           └── CustomerInvoiceApplication.java
│   │   └── resources/
│   │       ├── application.properties
│   │       └── data.sql
└── pom.xml

CustomerInvoiceApplication.java:

package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CustomerInvoiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(CustomerInvoiceApplication.class, args);
    }
}


CustomerController.java:

package com.example.controller;

import com.example.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;

@RestController
public class CustomerController {

    @Autowired
    private CustomerService customerService;

    @GetMapping("/exportCustomers")
    public String exportCustomersToJson() {
        try {
            customerService.exportCustomersToJson("customers_invoices.json");
            return "Customer data has been exported to customers_invoices.json";
        } catch (IOException e) {
            return "Error: " + e.getMessage();
        }
    }
}


Customer.java:

package com.example.entity;

import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "customer")
public class Customer {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "customer_id")
    private Long customerId;

    @Column(name = "name")
    private String name;

    @Column(name = "email")
    private String email;

    @Column(name = "phone")
    private String phone;

    @Column(name = "address")
    private String address;

    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Invoice> invoices;

    // Getters and setters
}


Invoice.java:

package com.example.entity;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "invoice")
public class Invoice {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "invoice_id")
    private Long invoiceId;

    @ManyToOne
    @JoinColumn(name = "customer_id", nullable = false)
    private Customer customer;

    @Column(name = "invoice_date")
    private LocalDate invoiceDate;

    @Column(name = "total_amount")
    private Double totalAmount;

    // Getters and setters
}


CustomerRepository.java:

package com.example.repository;

import com.example.entity.Customer;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CustomerRepository extends JpaRepository<Customer, Long> {
}


InvoiceRepository.java:

package com.example.repository;

import com.example.entity.Invoice;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface InvoiceRepository extends JpaRepository<Invoice, Long> {
}


CustomerService.java:

package com.example.service;

import com.example.entity.Customer;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.io.File;
import java.io.IOException;
import java.util.List;

@Service
public class CustomerService {

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private ObjectMapper objectMapper;

    // Fetch all customers with their invoices using Criteria API
    public List<Customer> getAllCustomersWithCriteria() {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<Customer> cq = cb.createQuery(Customer.class);
        Root<Customer> customerRoot = cq.from(Customer.class);
        customerRoot.fetch("invoices");
        cq.select(customerRoot).distinct(true);
        return entityManager.createQuery(cq).getResultList();
    }

    // Write customer and invoice data to a JSON file
    public void exportCustomersToJson(String filePath) throws IOException {
        List<Customer> customers = getAllCustomersWithCriteria();
        objectMapper.writeValue(new File(filePath), customers);
    }
}


application.properties:

# DB2 Database configuration
spring.datasource.url=jdbc:db2://<DB2_HOST>:<DB2_PORT>/<DB2_DATABASE>
spring.datasource.username=<DB2_USER>
spring.datasource.password=<DB2_PASSWORD>
spring.datasource.driver-class-name=com.ibm.db2.jcc.DB2Driver

# Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.DB2Dialect
spring.jpa.show-sql=true


data.sql:

INSERT INTO customer (customer_id, name, email, phone, address) VALUES (1, 'Teresa Hunter', 'harveyerika@example.net', '(396)966-6552', '832 Jennifer Lane Suite 500\nCareyton, TX 75792');
INSERT INTO invoice (invoice_id, customer_id, invoice_date, total_amount) VALUES (1, 1, '2024-03-14', 1997.0);
INSERT INTO invoice (invoice_id, customer_id, invoice_date, total_amount) VALUES (2, 1, '2024-01-03', 3204.0);
INSERT INTO invoice (invoice_id, customer_id, invoice_date, total_amount) VALUES (3, 1, '2024-03-10', 6989.0);


